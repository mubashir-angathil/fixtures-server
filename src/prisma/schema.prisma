generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String
  dob       DateTime
  role      Roles     @default(Customer)
  address   Address[]
  Order     Order[]
  Cart      Cart[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Address {
  id                     String       @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  phone                  String
  pinCode                Int
  locality               String
  address                String
  cityDistrictTown       String
  state                  String
  alternativePhoneNumber String?
  landmark               String?
  addressType            AddressType? @default(Home)
  User                   User         @relation(fields: [userId], references: [id])
  userId                 String       @db.ObjectId
  Orders                 Order[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  categoryId  String      @db.ObjectId
  vendorId    String      @db.ObjectId
  quantity    Int
  category    Category    @relation(fields: [categoryId], references: [id])
  vendor      User        @relation(fields: [vendorId], references: [id])
  colors      Color[]
  sizes       Size[]
  photos      Photo[]
  OrderItem   OrderItem[]
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  // productId String  @db.ObjectId
  // product   Product @relation(fields: [productId], references: [id])
  // Product Product?
  Product Product[]
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cartId     String   @db.ObjectId
  cart       Cart     @relation(fields: [cartId], references: [id])

  @@unique(name: "cartIdProductId", fields: [cartId, productId])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  totalAmount Float
  status      Status      @default(Pending)
  cancelled   Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id])
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   String      @db.ObjectId
  items       OrderItem[]
}

model OrderItem {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String     @db.ObjectId
  productId     String     @db.ObjectId
  promotionCode String?
  quantity      Int
  unitPrice     Float
  color         Color
  size          Size
  cancelled     Boolean    @default(false)
  order         Order      @relation(fields: [orderId], references: [id])
  product       Product    @relation(fields: [productId], references: [id])
  promotion     Promotion? @relation(fields: [promotionCode], references: [promotionCode])
}

model Promotion {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  validity       DateTime
  discountAmount Float?
  discountType   DiscountType?
  promotionCode  String?       @unique
  description    String?
  isActive       Boolean?      @default(true)
  usageLimit     Int?
  OrderItem      OrderItem[]
}

enum DiscountType {
  FIXED_AMOUNT
  PERCENTAGE
}

enum Status {
  Pending
  Shipped
  Delivered
}

enum Roles {
  Vendor
  Customer
}

enum Color {
  Red
  Green
  Blue
}

enum Size {
  Small
  Medium
  Large
  XLarge
}

enum AddressType {
  Home
  Work
}

type Photo {
  height Int    @default(200)
  width  Int    @default(100)
  url    String
}
