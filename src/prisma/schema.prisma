generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String
  dob       DateTime
  role      Roles     @default(Customer)
  address   Address[]
  Order     Order[]
  Cart      Cart[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  addressLine1 String
  addressLine2 String
  post         String
  pin          String
  phoneNumber  String?
  userId       String  @unique @db.ObjectId
  user         User    @relation(fields: [userId], references: [id])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int
  image       String[]
  categoryId  String   @db.ObjectId
  vendorId    String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  vendor      User     @relation(fields: [vendorId], references: [id])
  // OrderItem   OrderItem[]
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  // productId String  @db.ObjectId
  // product   Product @relation(fields: [productId], references: [id])
  // Product Product?
  Product Product[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  toalAmount Int
  user       User        @relation(fields: [userId], references: [id])
  status     Status      @default(Pending)
  OrderItem  OrderItem[]
}

model OrderItem {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String     @db.ObjectId
  productId     String     @db.ObjectId
  promotionCode String?
  quantity      Int
  unitPrice     Int
  order         Order      @relation(fields: [orderId], references: [id])
  // product       Product    @relation(fields: [productId], references: [id])
  promotion     Promotion? @relation(fields: [promotionCode], references: [promotionCode])
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @unique @db.ObjectId
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cartId     String   @db.ObjectId
  cart       Cart     @relation(fields: [cartId], references: [id])
}

model Promotion {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  validity       DateTime
  discountAmount Float?
  discountType   DiscountType?
  promotionCode  String?       @unique
  description    String?
  isActive       Boolean?      @default(true)
  usageLimit     Int?
  OrderItem      OrderItem[]
}

enum DiscountType {
  FIXED_AMOUNT
  PERCENTAGE
}

enum Status {
  Pending
  Shipped
  Delivered
}

enum Roles {
  Vendor
  Customer
}
